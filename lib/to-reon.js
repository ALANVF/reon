"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _isValidPath = _interopRequireDefault(require("is-valid-path"));

var _isUrl = _interopRequireDefault(require("is-url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Generated by CoffeeScript 2.5.1
var buildArray,
    buildBoolean,
    buildNull,
    buildNumber,
    buildObject,
    buildString,
    buildValue,
    isValidFile,
    literals,
    normalizeChar,
    replaceEscapes,
    toREON,
    indexOf = [].indexOf;
literals = {
  word: /^[^\d\/\\,()[\]{}"'#%$@:;][^\/\\,()[\]{}"#%$@:;]*$/,
  number: /^-?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/,
  tuple: /^\d+(?:\.\d+){2,12}$/,
  issue: /^#[^\s@#$%^()[\]{},\\;"'<>\/]+$/,
  ref: /^@[^#$@'",;=\\^\/<>()[\]{}]+$/,
  email: /^[^\s:\/()[\]{}]+@[^\s:\/()[\]{}]+$/
}; // ... finish

normalizeChar = function normalizeChar(_char) {
  var hex;

  if ("\x01" <= _char && _char <= "\x1A") {
    hex = _char.charCodeAt(0).toString(16).toUpperCase();

    if (hex.length === 1) {
      return "^(0".concat(hex, ")");
    } else {
      return "^(".concat(hex, ")");
    }
  } else {
    return _char;
  }
};

replaceEscapes = function replaceEscapes(str) {
  var multiline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var _char2, chars, i, j, level, nestedLevel;

  chars = function () {
    var l, len, len1, m, results, results1;

    if (multiline) {
      level = 0;
      results = [];

      for (i = l = 0, len = str.length; l < len; i = ++l) {
        _char2 = str[i];

        switch (_char2) {
          case "^":
            results.push("^^");
            break;

          case "\t":
            results.push("\t");
            break;

          case "\n":
            results.push("\n");
            break;

          case "\r":
            results.push("\r");
            break;

          case "\0":
            results.push("^@");
            break;

          case "\b":
            results.push("^(back)");
            break;

          case "\x0C":
            results.push("^(page)");
            break;

          case "\x1B":
            results.push("^[");
            break;

          case "\x1C":
            results.push("^\\");
            break;

          case "\x1D":
            results.push("^]");
            break;

          case "\x1E":
            results.push("^(1E)");
            break;

          case "\x1F":
            results.push("^_");
            break;

          case "\x7F":
            results.push("^~");
            break;

          case "}":
            if (level === 0) {
              results.push("^}");
            } else {
              level--;
              results.push("}");
            }

            break;

          case "{":
            nestedLevel = level + 1;
            j = i + 1;

            while (nestedLevel > 0 && j < str.length) {
              switch (str[j++]) {
                case "{":
                  nestedLevel++;
                  break;

                case "}":
                  nestedLevel--;
              }
            }

            if (nestedLevel <= 0) {
              level++;
              results.push("{");
            } else {
              results.push("^{");
            }

            break;

          default:
            results.push(normalizeChar(_char2));
        }
      }

      return results;
    } else {
      results1 = [];

      for (m = 0, len1 = str.length; m < len1; m++) {
        _char2 = str[m];

        switch (_char2) {
          case "^":
            results1.push("^^");
            break;

          case '"':
            results1.push('^"');
            break;

          case "\t":
            results1.push("^-");
            break;

          case "\n":
            results1.push("^/");
            break;

          case "\0":
            results1.push("^@");
            break;

          case "\b":
            results1.push("^(back)");
            break;

          case "\x0C":
            results1.push("^(page)");
            break;

          case "\x1B":
            results1.push("^[");
            break;

          case "\x1C":
            results1.push("^\\");
            break;

          case "\x1D":
            results1.push("^]");
            break;

          case "\x1E":
            results1.push("^(1E)");
            break;

          case "\x1F":
            results1.push("^_");
            break;

          case "\x7F":
            results1.push("^~");
            break;

          default:
            results1.push(normalizeChar(_char2));
        }
      }

      return results1;
    }
  }();

  return chars.join("");
};

isValidFile = function isValidFile(str) {
  return indexOf.call(str, "/") >= 0 !== (indexOf.call(str, "\\") >= 0 && str[0] !== "\\") && !str.match(/\s|\\\\|\/\//) && (0, _isValidPath["default"])(str);
};

buildObject = function buildObject(object, indent) {
  var k, key, pairs, tabs, v;

  if (Object.keys(object).length === 0) {
    return "#()";
  }

  tabs = "\t".repeat(indent + 1);

  pairs = function () {
    var results;
    results = [];

    for (k in object) {
      v = object[k];

      key = function () {
        switch (false) {
          // tuple!
          case !k.match(literals.tuple):
            return k;
          // issue!

          case !k.match(literals.issue):
            return k;
          // ref!

          case !k.match(literals.ref):
            return k;
          // email!

          case !k.match(literals.email):
            return k;
          // url!

          case !(0, _isUrl["default"])(k):
            return k;
          // file!

          case !isValidFile(k):
            return "%".concat(k);
          // ... finish later
          // word!

          case !k.match(literals.word):
            return "".concat(k, ":");
          // number!

          case !k.match(literals.number):
            return k;

          default:
            return "\"".concat(replaceEscapes(k), "\"");
        }
      }();

      results.push("\n".concat(tabs).concat(key, " ").concat(buildValue(v, indent + 1)));
    }

    return results;
  }();

  return "#(".concat(pairs.join(""), "\n").concat("\t".repeat(indent), ")");
};

buildArray = function buildArray(array, indent) {
  var tabs, value, values;

  if (array.length === 0) {
    return "[]";
  }

  values = function () {
    var l, len, results;
    results = [];

    for (l = 0, len = array.length; l < len; l++) {
      value = array[l];
      results.push(buildValue(value, indent + 1));
    }

    return results;
  }();

  if (values.length > 10 || values.some(function (str) {
    return indexOf.call(str, "\n") >= 0 || str.length > 80;
  })) {
    tabs = "\t".repeat(indent + 1);

    values = function () {
      var l, len, results;
      results = [];

      for (l = 0, len = values.length; l < len; l++) {
        value = values[l];
        results.push("\n" + tabs + value);
      }

      return results;
    }();

    return "[".concat(values.join(""), "\n").concat("\t".repeat(indent), "]");
  } else {
    return "[".concat(values.join(" "), "]");
  }
};

buildBoolean = function buildBoolean(bool) {
  if (bool) {
    return "true";
  } else {
    return "false";
  }
};

buildNull = function buildNull() {
  return "none";
};

buildNumber = function buildNumber(number) {
  return number.toString();
};

buildString = function buildString(string, indent) {
  switch (false) {
    // tuple!
    case !string.match(literals.tuple):
      return string;
    // issue!

    case !string.match(literals.issue):
      return string;
    // ref!

    case !string.match(literals.ref):
      return string;
    // email!

    case !string.match(literals.email):
      return string;
    // url!

    case !(0, _isUrl["default"])(string):
      return string;
    // file!

    case !isValidFile(string):
      return "%".concat(string);
    // ... finish later

    case !(string.match(/\n {2,}/) || string.match(/\n\t+/)):
      return "{".concat(replaceEscapes(string, true), "}");

    default:
      return "\"".concat(replaceEscapes(string), "\"");
  }
};

buildValue = function buildValue(value, indent) {
  if (value === null) {
    return buildNull();
  } else {
    switch (value.constructor) {
      case Boolean:
        return buildBoolean(value);

      case Number:
        return buildNumber(value);

      case String:
        return buildString(value, indent);

      case Array:
        return buildArray(value, indent);

      default:
        return buildObject(value, indent);
    }
  }
};

var _default = toREON = function toREON(json) {
  return buildObject(json, 0);
};

exports["default"] = _default;