"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Generated by CoffeeScript 2.5.1
var Env;

var _default = Env = /*#__PURE__*/function () {
  function Env(_ref) {
    var _ref$env = _ref.env,
        env1 = _ref$env === void 0 ? null : _ref$env,
        _ref$outer = _ref.outer,
        outer = _ref$outer === void 0 ? null : _ref$outer;

    _classCallCheck(this, Env);

    var k, v;
    this.env = env1;
    this.outer = outer;

    if (this.env != null) {
      if (_typeof(this.env) === "object" && this.env.constructor === Object) {
        this.env = new Map(function () {
          var ref, results;
          ref = this.env;
          results = [];

          for (k in ref) {
            v = ref[k];
            results.push([k, v]);
          }

          return results;
        }.call(this));
      } else {
        this.env = new Map(this.env);
      }
    } else {
      this.env = new Map();
    }
  }

  _createClass(Env, [{
    key: "has",
    value: function has(word) {
      var ref;
      return this.env.has(word) || ((ref = this.outer) != null ? ref.has(word) : void 0) != null;
    }
  }, {
    key: "get",
    value: function get(word) {
      var ref, ref1;
      return (ref = this.env.get(word)) != null ? ref : (ref1 = this.outer) != null ? ref1.get(word) : void 0;
    }
  }, {
    key: "set",
    value: function set(word, value) {
      var ref;

      if ((ref = this.outer) != null ? ref.has(word) : void 0) {
        return this.outer.set(word, value);
      } else {
        return this.env.set(word, value);
      }
    }
  }, {
    key: "add",
    value: function add(word, value) {
      return this.env.set(word, value);
    }
  }, {
    key: "newInner",
    value: function newInner() {
      var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return new Env({
        env: env,
        outer: this
      });
    }
  }]);

  return Env;
}();

exports["default"] = _default;