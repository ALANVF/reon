"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.evalTokens = exports.evalNextExpr = exports.evalNextExprWithQuoting = exports.isAnyMacro = exports.isIntrinsic = exports.isMacro = exports.Intrinsic = exports.Macro = exports.ControlFlow = exports.Param = void 0;

var _token5 = _interopRequireWildcard(require("./token.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.5.1
var mustGetWord, notEmpty;
var Param = {
  val: 0,
  get: 1,
  lit: 2
};
exports.Param = Param;

var ControlFlow = function () {
  var ControlFlow = function ControlFlow() {
    _classCallCheck(this, ControlFlow);
  };

  ;

  ControlFlow.Return = function Return() {
    var value1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _token5.Value.NONE;

    _classCallCheck(this, Return);

    this.value = value1;
  };

  ControlFlow.Break = function Break() {
    var value1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _token5.Value.NONE;

    _classCallCheck(this, Break);

    this.value = value1;
  };

  ControlFlow.Continue = function Continue() {
    _classCallCheck(this, Continue);
  };

  return ControlFlow;
}.call(void 0);

exports.ControlFlow = ControlFlow;

var Macro = /*#__PURE__*/function () {
  function Macro(params, body) {
    _classCallCheck(this, Macro);

    this.params = params;
    this.body = body;
  } // basic for now


  _createClass(Macro, [{
    key: "call",
    value: function call(env, tokens) {
      var args, e, kind, name, tmpEnv;

      args = function () {
        var i, len, ref, results;
        ref = this.params;
        results = [];

        for (i = 0, len = ref.length; i < len; i++) {
          var _ref$i = _slicedToArray(ref[i], 2);

          kind = _ref$i[0];
          name = _ref$i[1];
          results.push([name, evalNextExprWithQuoting(env, tokens, kind)]);
        }

        return results;
      }.call(this);

      try {
        tmpEnv = env.newInner(args);
        return evalTokens(tmpEnv, this.body);
      } catch (error) {
        e = error;

        switch (false) {
          case !(e instanceof ControlFlow.Return):
            return e.value;

          case !(e instanceof ControlFlow.Break):
            throw new Error("Unhandled break!");

          case !(e instanceof ControlFlow.Continue):
            throw new Error("Unhandled continue!");

          default:
            throw e;
        }
      }
    }
  }]);

  return Macro;
}();

exports.Macro = Macro;

var Intrinsic = /*#__PURE__*/function () {
  function Intrinsic(params, fn) {
    _classCallCheck(this, Intrinsic);

    this.params = params;
    this.fn = fn;
  }

  _createClass(Intrinsic, [{
    key: "call",
    value: function call(env, tokens) {
      var args, param;

      args = function () {
        var i, len, ref, results;
        ref = this.params;
        results = [];

        for (i = 0, len = ref.length; i < len; i++) {
          param = ref[i];
          results.push(evalNextExprWithQuoting(env, tokens, param));
        }

        return results;
      }.call(this);

      return this.fn(env, args);
    }
  }]);

  return Intrinsic;
}();

exports.Intrinsic = Intrinsic;

var isMacro = function isMacro(value) {
  return value instanceof Macro;
};

exports.isMacro = isMacro;

var isIntrinsic = function isIntrinsic(value) {
  return value instanceof Intrinsic;
};

exports.isIntrinsic = isIntrinsic;

var isAnyMacro = function isAnyMacro(value) {
  return isMacro(value) || isIntrinsic(value);
};

exports.isAnyMacro = isAnyMacro;

notEmpty = function notEmpty(tokens) {
  if (tokens.length === 0) {
    throw new Error("Unexpected end of input!");
  }
};

mustGetWord = function mustGetWord(env, word) {
  var value;

  if ((value = env.get(val)) != null) {
    if (isAnyMacro(value)) {
      throw new Error("Cannot get a macro value");
    } else {
      return value;
    }
  } else {
    throw new Error("Undefined word `".concat(val, "`!"));
  }
};

var evalNextExprWithQuoting = function evalNextExprWithQuoting(env, tokens, quoting) {
  var kind, token, val;
  notEmpty(tokens);

  switch (quoting) {
    case Param.val:
      return evalNextExpr(env, tokens);

    case Param.get:
      return tokens;

    default:
      var _token = token = tokens.shift();

      var _token2 = _slicedToArray(_token, 2);

      kind = _token2[0];
      val = _token2[1];

      switch (kind) {
        case _token5["default"].paren:
          return evalTokens(env, val);

        case _token5["default"].getWord:
          return mustGetWord(val);

        default:
          return token;
      }

  }
};

exports.evalNextExprWithQuoting = evalNextExprWithQuoting;

var evalNextExpr = function evalNextExpr(env, tokens) {
  var kind, token, val, value;
  notEmpty(tokens);

  var _token3 = token = tokens.shift();

  var _token4 = _slicedToArray(_token3, 2);

  kind = _token4[0];
  val = _token4[1];

  switch (kind) {
    case _token5["default"].getWord:
      return mustGetWord(env, val);

    case _token5["default"].setWord:
      return env.set(val, evalNextExpr(env, tokens));

    case _token5["default"].word:
      if ((value = env.get(val)) != null) {
        if (isAnyMacro(value)) {
          return value.call(env, tokens);
        } else {
          return value;
        }
      } else {
        throw new Error("Undefined word `".concat(val, "`!"));
      }

      break;

    case _token5["default"].paren:
      return evalTokens(env, val);

    default:
      return token;
  }
};

exports.evalNextExpr = evalNextExpr;

var evalTokens = function evalTokens(env, _ref) {
  var _ref2 = _toArray(_ref),
      tokens = _ref2.slice(0);

  var res;

  if (tokens.length === 0) {
    throw new Error("Unexpected end of input!");
  } else {
    res = _token5.Value.NONE;

    while (tokens.length > 0) {
      res = evalNextExpr(env, tokens);
    }

    return res;
  }
};
/*
export reduceTokens = (env, [tokens...]) ->
	while tokens.length > 0
		evalNextExpr(env, tokens)
*/


exports.evalTokens = evalTokens;