"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nameOfToken = exports.Typesets = exports.Value = exports["default"] = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.5.1
var Token;

var _default = Token = {
  none: 0,
  logic: 1,
  word: 2,
  litWord: 3,
  getWord: 4,
  setWord: 5,
  integer: 6,
  hexa: 7,
  "float": 8,
  money: 9,
  tuple: 10,
  issue: 11,
  ref: 12,
  email: 13,
  url: 14,
  file: 15,
  time: 16,
  pair: 17,
  date: 18,
  "char": 19,
  tag: 20,
  string: 21,
  block: 22,
  map: 23,
  paren: 24
};

exports["default"] = _default;

var Value = function () {
  var _Value, name, val;

  _Value = {};

  for (name in Token) {
    val = Token[name];

    (function (val) {
      return _Value[name] = function (value) {
        return [val, value];
      };
    })(val);
  }

  _Value.NONE = _Value.none(null);
  return _Value;
}();

exports.Value = Value;

var Typesets = function () {
  var n;

  var Typesets = function Typesets() {
    _classCallCheck(this, Typesets);
  };

  ;
  Typesets.anyWord = [Token.word, Token.litWord, Token.getWord, Token.setWord];

  Typesets.anyString = function () {
    var i, len, ref, results;
    ref = ["ref", "email", "url", "file", "tag", "string"];
    results = [];

    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      results.push(Token[n]);
    }

    return results;
  }();

  Typesets.series = [].concat(_toConsumableArray(Typesets.anyString), [Token.block, Token.paren]);
  Typesets.seriesLike = [].concat(_toConsumableArray(Typesets.series), [Token.map]);
  Typesets.otherStringy = [Token.money, Token.tuple, Token.issue, Token.time, Token.pair, Token.date];
  return Typesets;
}.call(void 0);

exports.Typesets = Typesets;

var nameOfToken = function nameOfToken(token) {
  var name, rx;
  name = Object.keys(Token)[token];
  rx = /[A-Z]/;

  while (rx.exec(name)) {
    name = name.replace(rx, function (l) {
      return "-" + l.toLowerCase();
    });
  }

  return name + "!";
};

exports.nameOfToken = nameOfToken;