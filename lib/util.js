"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chunk = exports.any = exports.all = exports.id = exports.zip = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// Generated by CoffeeScript 2.5.1
var splice = [].splice;

var zip = function zip(arr1, arr2) {
  var fn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : void 0;
  var i, j, k, len, len1, results, results1, v;

  if (fn != null) {
    results = [];

    for (i = j = 0, len = arr1.length; j < len; i = ++j) {
      v = arr1[i];
      results.push(fn(v, arr2[i]));
    }

    return results;
  } else {
    results1 = [];

    for (i = k = 0, len1 = arr1.length; k < len1; i = ++k) {
      v = arr1[i];
      results1.push([v, arr2[i]]);
    }

    return results1;
  }
};

exports.zip = zip;

var id = function id(value) {
  return value;
};

exports.id = id;

var all = function all(values) {
  return values.every(id);
};

exports.all = all;

var any = function any(values) {
  return values.some(id);
};

exports.any = any;

var chunk = function chunk(values, size) {
  var _ref, _ref2, _splice$call, _splice$call2;

  var fill = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : void 0;

  var _, end, i, j, ref, ref1, res;

  ref = res = function () {
    var j, len, results;
    results = [];

    for (i = j = 0, len = values.length; j < len; i = ++j) {
      _ = values[i];

      if (i % size === 0) {
        results.push(values.slice(i, i + size));
      }
    }

    return results;
  }(), (_ref = ref, _ref2 = _toArray(_ref), _ = _ref2.slice(0), _ref), (_splice$call = splice.call(_, -1), _splice$call2 = _slicedToArray(_splice$call, 1), end = _splice$call2[0], _splice$call);

  if (end != null && fill !== void 0 && end.length !== size) {
    for (i = j = 0, ref1 = size; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
      if (end[i] == null) {
        end[i] = fill;
      }
    }
  }

  return res;
};

exports.chunk = chunk;